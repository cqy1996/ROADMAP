openapi: 3.0.0

servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/rpirrmdg/ROADMAP/1.0.0

termsOfService: http://www.apache.org/licenses/LICENSE-2.0.html

info:
  description: This is an example API for ROADMAP development.
  version: "1.0.0"
  title: ROADMAP
  contact: 
    name: Qiyun Cheng
    email: chengqy0113@gmail.com

tags:
  - name: Monte Carlo
    description: Dose calculation using Monte Carlo method.
  - name: Phantoms
    description: Analytical Phantoms for dose calculation.
  - name: DL Segmentation
    description: Images segmentation using deeplearning method.

externalDocs:
  description: "Find out more about RPI RRMDG Group"
  url: "http://rrmdg.rpi.edu"

paths:
  
  /Existence/Phantoms:
    get:
      tags:
        - Phantoms
      summary: searches Existence phantoms
      operationId: ExistencePhantoms
      description: |
        By passing in the appropriate options, you can search for
        available Existence in the system
      parameters:
        - in: query
          name: searchString
          description: pass an optional search string for looking up Existence
          required: false
          schema:
            type: string
        - in: query
          name: skip
          description: number of records to skip for pagination
          schema:
            type: integer
            format: int32
            minimum: 0
        - in: query
          name: limit
          description: maximum number of records to return
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 50
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Existence'
        '400':
          description: bad input parameter
          
  /Existence/Monte Carlo:
    get:
      tags:
        - Monte Carlo
      summary: searches Existence Monte Carlo codes
      operationId: ExistenceMCcodes
      description: |
        By passing in the appropriate options, you can search for
        available Existence in the system
      parameters:
        - in: query
          name: searchString
          description: pass an optional search string for looking up Existence
          required: false
          schema:
            type: string
        - in: query
          name: skip
          description: number of records to skip for pagination
          schema:
            type: integer
            format: int32
            minimum: 0
        - in: query
          name: limit
          description: maximum number of records to return
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 50
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Existence'
        '400':
          description: bad input parameter

  /Existence/DL Segmentation:
    get:
      tags:
        - DL Segmentation
      summary: searches Existence DL Segmentation codes
      operationId: ExistenceDLSegmentation
      description: |
        By passing in the appropriate options, you can search for
        available Existence in the system
      parameters:
        - in: query
          name: searchString
          description: pass an optional search string for looking up Existence
          required: false
          schema:
            type: string
        - in: query
          name: skip
          description: number of records to skip for pagination
          schema:
            type: integer
            format: int32
            minimum: 0
        - in: query
          name: limit
          description: maximum number of records to return
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 50
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Existence'
        '400':
          description: bad input parameter
          
          
  /Update/Monte Carlo:
    post:
      tags:
        - Monte Carlo
      summary: adds new Monte Carlo codes
      operationId: Update Monte Carlo
      description: Adds an item to the system
      responses:
        '201':
          description: item created
        '400':
          description: 'invalid input, object invalid'
        '409':
          description: an existing item already exists
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Existence'
        description: Existence item to add
        
  /Update/Phantoms:
    post:
      tags:
        - Phantoms
      summary: adds a new phantom
      operationId: Update Phantoms
      description: Adds an item to the system
      responses:
        '201':
          description: item created
        '400':
          description: 'invalid input, object invalid'
        '409':
          description: an existing item already exists
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Existence'
        description: Existence item to add        
        
        
        
  /Update/DL Segmentation:
    post:
      tags:
        - DL Segmentation
      summary: adds new DL Segmentation codes
      operationId: Update DL Sgementation
      description: Adds an item to the system
      responses:
        '201':
          description: item created
        '400':
          description: 'invalid input, object invalid'
        '409':
          description: an existing item already exists
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Existence'
        description: Existence item to add  
  

components:
  schemas:
    Existence:
      type: object
      required:
        - id
        - name
        - Update
        - releaseDate
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        name:
          type: string
          example: Widget Adapter
        releaseDate:
          type: string
          format: date-time
          example: '2016-08-29T09:12:33.001Z'
        Update:
          $ref: '#/components/schemas/Update'
    Update:
      required:
        - name
      properties:
        name:
          type: string
          example: ACME Corporation
        homePage:
          type: string
          format: url
          example: 'https://www.acme-corp.com'
        phone:
          type: string
          example: 408-867-5309
      type: object
